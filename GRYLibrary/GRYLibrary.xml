<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GRYLibrary</name>
    </assembly>
    <members>
        <member name="T:GRYLibrary.Miscellaneous.Semaphore">
            <summary>
            Represents a threadsafe semaphore
            </summary>
        </member>
        <member name="M:GRYLibrary.Miscellaneous.TaskQueue.Queue(System.Tuple{System.String,System.Action})">
            <remarks>The string-value is supposed to be the name of the action.</remarks>
        </member>
        <member name="T:GRYLibrary.SimpleObjectPersistence`1">
            <summary>
            Represents a simple Manager for persisting on the file-system and reloading an object.
            </summary>
            <typeparam name="T">The type of the object which should be persisted.</typeparam>
        </member>
        <member name="P:GRYLibrary.GRYObjectSystem.Meta.Property.Property`1.History">
            <summary>
            The history contains all T-objects which where set as value for <see cref="P:GRYLibrary.GRYObjectSystem.Meta.Property.Property`1.Value"/> with the <see cref="T:System.DateTime"/> when they were set.
            </summary>
        </member>
        <member name="M:GRYLibrary.ExternalProgramExecutor.StartConsoleApplicationInCurrentConsoleWindow">
            <summary>
            Starts the program which was set in the properties.
            </summary>
            <returns>
            Returns the exit-code of the executed program.
            </returns>
        </member>
        <member name="P:GRYLibrary.GRYLogConfiguration.ReloadConfigurationWhenSourceFileWillBeChanged">
            <summary>
            If this value is false then changing this value in the configuration-file has no effect.
            </summary>
        </member>
        <member name="P:GRYLibrary.GRYLogConfiguration.DebugBreakMode">
            <summary>
            If true then <see cref="M:System.Diagnostics.Debugger.Break"/> will be executed every time a logentry will be created whose loglevel is contained in <see cref="P:GRYLibrary.GRYLogConfiguration.DebugBreakLevel"/>. This feature is for debugging-purposes only.
            </summary>
            <remarks>
            Caution: Do not enable this function in productive-mode unless you know exactly what you are doing! Applications typically crash if <see cref="M:System.Diagnostics.Debugger.Break"/> will be executed and no debugger is attached. For that reason this function is disabled by default.
            </remarks>
        </member>
        <member name="P:GRYLibrary.GRYLogConfiguration.AddIdToEveryLogEntry">
            <summary>
            If true then every log-entry gets a random id. This function is disabled by default.
            </summary>
        </member>
        <member name="P:GRYLibrary.GRYLogConfiguration.LogOverhead">
            <summary>
            If true then overhead like date/time will be added to every log-entry.
            </summary>
        </member>
        <member name="T:GRYLibrary.PercentValue">
            <summary>
            Represents a number between 0 and 1.
            </summary>
        </member>
        <member name="M:GRYLibrary.Utilities.MoveContentOfFoldersAcrossVolumes(System.String,System.String,System.Func{System.String,System.Boolean},System.Action{System.Exception},System.Boolean)">
            <summary>
            Moves the content of <paramref name="sourceFolder"/> to <paramref name="targetFolder"/>.
            </summary>
            <remarks>
            If <paramref name="deleteAlreadyExistingFilesWithoutCopy"/>==true then the files in <paramref name="sourceFolder"/> which do already exist in <paramref name="targetFolder"/> will be deleted without copying them and without any backup. (Only filepath/-name will be compared. The content of the file does not matter for this comparison.)
            This function preserves the directory-structure of <paramref name="sourceFolder"/>.
            This function ignores empty directories in <paramref name="sourceFolder"/>.
            </remarks>
        </member>
        <member name="M:GRYLibrary.Utilities.RunAllConcurrentAndReturnAllResults``1(System.Collections.Generic.ISet{System.Func{``0}},System.Int32)">
            <summary>
            Starts all <see cref="T:System.Func`1"/>-objects in <paramref name="functions"/> concurrent and return all results which did not throw an exception.
            </summary>
            <returns>The results of all finished <paramref name="functions"/>-methods with their results.</returns>
        </member>
        <member name="M:GRYLibrary.Utilities.RunAllConcurrentAndReturnFirstResult``1(System.Collections.Generic.ISet{System.Func{``0}},System.Int32)">
            <summary>
            Starts all <see cref="T:System.Threading.ThreadStart"/>-objects in <paramref name="functions"/> concurrent and return the result of the first execution which does not throw an exception.
            Warning: This function is not implemented yet.
            </summary>
            <returns>The result of the first finished <paramref name="functions"/>-method.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="functions"/> is empty.</exception>
            <exception cref="T:System.Exception">If every <paramref name="functions"/>-method throws an exception.</exception>
        </member>
        <member name="M:GRYLibrary.Utilities.IsAuthenticated(System.String,System.String,System.String,System.String)">
            <summary>
            Authenticates a user against an active directory.
            </summary>
            <param name="username">Represents the name of the desired user. It can be "MyUsername" or optionally "Domain\MyUsername."</param>
            <param name="password">Represents the password to authenticate <paramref name="username"/>.</param>
            <param name="authenticationProtocol"></param>
            <param name="authentificationServerName">Represents the (LDAP-)server. The format must be with leading slashs, e. g. "//MyServer.com".</param>
            <returns>Returns true if and only if <paramref name="password"/> is the correct password for the user with the name <paramref name="username"/></returns>
        </member>
        <member name="M:GRYLibrary.Utilities.GuessEncodingOfByteArray(System.Byte[],System.Text.Encoding)">
            <remarks>
            This function comes with absolutely no warranty (as every function in the GRYLibrary). This function can not recognize the encoding every <paramref name="content"/> correctly. 
            </remarks>
        </member>
        <member name="T:GRYLibrary.SimpleGenericXMLSerializer`1">
            <summary>
            Represents a very easy usable XML-Serializer.
            </summary>
            <typeparam name="T">The type of the object which should be serialized.</typeparam>
        </member>
    </members>
</doc>
