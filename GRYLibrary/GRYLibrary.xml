<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GRYLibrary</name>
    </assembly>
    <members>
        <member name="M:GRYLibrary.Miscellaneous.GraphOperations.DirectedGraph.GetDirectSuccessors(GRYLibrary.Miscellaneous.GraphOperations.Vertex)">
            <returns>Returns a set of all vertices which are a direct successor of this vertex in this graph.</returns>
            <remarks>If this graph contains a selfloop with this vertex then the result-set will also contain this vertex.
            The runtime of this function is &lt;=O(|this.Edges|).
            </remarks>
        </member>
        <member name="M:GRYLibrary.Miscellaneous.GraphOperations.DirectedGraph.GetDirectPredecessors(GRYLibrary.Miscellaneous.GraphOperations.Vertex)">
            <returns>Returns a set of all vertices which are a direct predecessor of this vertex in this graph.</returns>
            <remarks>
            If this graph contains a selfloop with this vertex then the result-set will also contain this vertex.
            The runtime of this function is &lt;=O(|this.Edges|).
            </remarks>
        </member>
        <member name="P:GRYLibrary.Miscellaneous.GraphOperations.Edge.Source">
            <remarks>
            In the context of <see cref="T:GRYLibrary.Miscellaneous.GraphOperations.UndirectedGraph"/>-objects it does not matter which <see cref="T:GRYLibrary.Miscellaneous.GraphOperations.Vertex"/>- object is marked as <see cref="P:GRYLibrary.Miscellaneous.GraphOperations.Edge.Source"/> and which is marked as <see cref="P:GRYLibrary.Miscellaneous.GraphOperations.Edge.Target"/>.
            </remarks>
        </member>
        <member name="P:GRYLibrary.Miscellaneous.GraphOperations.Edge.Target">
            <remarks>
            In the context of <see cref="T:GRYLibrary.Miscellaneous.GraphOperations.UndirectedGraph"/>-objects it does not matter which <see cref="T:GRYLibrary.Miscellaneous.GraphOperations.Vertex"/>- object is marked as <see cref="P:GRYLibrary.Miscellaneous.GraphOperations.Edge.Source"/> and which is marked as <see cref="P:GRYLibrary.Miscellaneous.GraphOperations.Edge.Target"/>.
            </remarks>
        </member>
        <member name="T:GRYLibrary.Miscellaneous.GraphOperations.Graph">
            <summary>
            Represents a graph
            </summary>
            <remarks>
            This graph does not support two edges between the same two vertices.
            </remarks>
        </member>
        <member name="M:GRYLibrary.Miscellaneous.GraphOperations.Graph.AddEdge(GRYLibrary.Miscellaneous.GraphOperations.Edge)">
            <remarks>
            This function will also add the vertices which are connected by <paramref name="edge"/> to the list of vertices of this graph.
            </remarks>
        </member>
        <member name="M:GRYLibrary.Miscellaneous.GraphOperations.Graph.RemoveVertex(GRYLibrary.Miscellaneous.GraphOperations.Vertex)">
            <remarks>
            This function will also remove the edges which have a connection to this <paramref name="vertex"/> from the list of edges of this graph.
            </remarks>
        </member>
        <member name="M:GRYLibrary.Miscellaneous.GraphOperations.Graph.Equals(System.Object)">
            <returns>
            Returns true if and only if the adjacency-matrices of this and <paramref name="obj"/> are equal.
            </returns>
            <remarks>
            This function ignores properties like <see cref="P:GRYLibrary.Miscellaneous.GraphOperations.Graph.SelfLoopIsAllowed"/> or the name of the edges and vertices.
            </remarks>
        </member>
        <member name="M:GRYLibrary.Miscellaneous.GraphOperations.UndirectedGraph.GetDirectSuccessors(GRYLibrary.Miscellaneous.GraphOperations.Vertex)">
            <returns>Returns a set of all vertices which have a connection to this vertex in this graph.</returns>
            <remarks>
            If this graph contains a selfloop with this vertex then the result-set will also contain this vertex.
            The runtime of this function is &lt;=O(|this.Edges|).
            </remarks>
        </member>
        <member name="T:GRYLibrary.Miscellaneous.RedundantIdler">
            <summary>
            This type is a helper to start a backup program in a very simple way:
            In the First line of the entry-point of your program (e.g. "Main()" in Program.cs) you simply call "<see cref="T:GRYLibrary.Miscellaneous.RedundantIdler"/>.<see cref="M:GRYLibrary.Miscellaneous.RedundantIdler.WaitUntilExecutionIsRequired"/>();".
            This will start a second instance of the program with the same working-directory and same arguments. This second instance waits and does nothing until the first instance of the
            program terminated. When the first instance of the program terminated the second instance will now be treated as first instance so it starts a new backup-instance and runs
            the program quite normally.
            </summary>
            <example>
            The name of your program is MyProgram.exe. MyProgram.exe provides an important service. So when you start this program you want to ensure that MyProgram.exe is always running
            even if MyProgram.exe crashes or someone kills MyProgram.exe.
            To have an easy way which ensures that MyProgram.exe will always be restarted if it will be terminated for any reason is using <see cref="T:GRYLibrary.Miscellaneous.RedundantIdler"/>.
            <see cref="T:GRYLibrary.Miscellaneous.RedundantIdler"/> starts a second instance which sleeps/waits exactly until the first instance is terminated.
            </example>
            <remarks>
            To identify if a program using <see cref="T:GRYLibrary.Miscellaneous.RedundantIdler"/> is the first or the second instance only the name of the process will be compared. <see cref="T:GRYLibrary.Miscellaneous.RedundantIdler"/> does only work if
            there is always exactly one process running on the computer which the name of the process which is using <see cref="T:GRYLibrary.Miscellaneous.RedundantIdler"/>.
            Currently there is no clean way to terminate both processes.
            </remarks>
        </member>
        <member name="T:GRYLibrary.Miscellaneous.Semaphore">
            <summary>
            Represents a threadsafe semaphore
            </summary>
        </member>
        <member name="M:GRYLibrary.Miscellaneous.TaskQueue.Queue(System.Tuple{System.String,System.Action})">
            <remarks>The string-value is supposed to be the name of the action.</remarks>
        </member>
        <member name="T:GRYLibrary.SimpleObjectPersistence`1">
            <summary>
            Represents a simple Manager for persisting on the file-system and reloading an object.
            </summary>
            <typeparam name="T">The type of the object which should be persisted.</typeparam>
        </member>
        <member name="M:GRYLibrary.SimpleObjectPersistence`1.#ctor(System.String)">
            <summary>
            Loads an object from <paramref name="file"/> which will be stored in <see cref="P:GRYLibrary.SimpleObjectPersistence`1.Object"/>. UTF-8 will be used as encoding.
            </summary>
            <param name="file">filename with full path</param>
        </member>
        <member name="M:GRYLibrary.SimpleObjectPersistence`1.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Loads an object from <paramref name="file"/> which will be stored in <see cref="P:GRYLibrary.SimpleObjectPersistence`1.Object"/>.
            </summary>
            <param name="file">filename with full path</param>
            <param name="encoding">Encoding which should be used to load <paramref name="file"/></param>
        </member>
        <member name="M:GRYLibrary.SimpleObjectPersistence`1.#ctor(System.String,`0)">
            <summary>
            Stores <paramref name="object"/> in <see cref="P:GRYLibrary.SimpleObjectPersistence`1.Object"/> and in <paramref name="file"/>. UTF-8 will be used as encoding.
            </summary>
            <param name="file">filename with full path</param>
            <param name="object">object which should be saved</param>
        </member>
        <member name="M:GRYLibrary.SimpleObjectPersistence`1.#ctor(System.String,System.Text.Encoding,`0)">
            <summary>
            Stores <paramref name="object"/> in <see cref="P:GRYLibrary.SimpleObjectPersistence`1.Object"/> and in <paramref name="file"/>.
            </summary>
            <param name="file">filename with full path</param>
            <param name="encoding">Encoding which should be used to save <paramref name="file"/></param>
            <param name="object">object which should be saved</param>
        </member>
        <member name="M:GRYLibrary.SimpleObjectPersistence`1.#ctor(System.String,`0,System.Xml.XmlWriterSettings)">
            <summary>
            Stores <paramref name="object"/> in <see cref="P:GRYLibrary.SimpleObjectPersistence`1.Object"/> and in <paramref name="file"/>.
            </summary>
            <param name="file">filename with full path</param>
            <param name="object">object which should be saved</param>
            <param name="xmlWriterSettings">settings for writing <paramref name="object"/> to the disk</param>
        </member>
        <member name="P:GRYLibrary.GRYObjectSystem.Meta.Property.Property`1.History">
            <summary>
            The history contains all T-objects which where set as value for <see cref="P:GRYLibrary.GRYObjectSystem.Meta.Property.Property`1.Value"/> with the <see cref="T:System.DateTime"/> when they were set.
            </summary>
        </member>
        <member name="M:GRYLibrary.ExternalProgramExecutor.StartConsoleApplicationInCurrentConsoleWindow">
            <summary>
            Starts the program which was set in the properties.
            </summary>
            <returns>
            Returns the exit-code of the executed program.
            </returns>
        </member>
        <member name="M:GRYLibrary.ExternalProgramExecutor.GetResult">
            <returns>Returns a summary of the executed program with its error-code, console-outputs, etc.</returns>
            <remarks>This summary is designed for readability and not for a further program-controlled processing of the data. For that purpose please read out the properties of this object.</remarks>
        </member>
        <member name="P:GRYLibrary.GRYLogConfiguration.ReloadConfigurationWhenSourceFileWillBeChanged">
            <summary>
            If this value is false then changing this value in the configuration-file has no effect.
            </summary>
        </member>
        <member name="T:GRYLibrary.PercentValue">
            <summary>
            Represents a number between 0 and 1.
            </summary>
        </member>
        <member name="M:GRYLibrary.Utilities.IncrementGuid(System.Guid,System.Int64)">
            <returns>
            Returns a new <see cref="T:System.Guid"/> whose value in the last block is incremented
            </returns>
        </member>
        <member name="M:GRYLibrary.Utilities.MoveContentOfFoldersAcrossVolumes(System.String,System.String,System.Func{System.String,System.Boolean},System.Action{System.Exception},System.Boolean)">
            <summary>
            Moves the content of <paramref name="sourceFolder"/> to <paramref name="targetFolder"/>.
            </summary>
            <remarks>
            If <paramref name="deleteAlreadyExistingFilesWithoutCopy"/>==true then the files in <paramref name="sourceFolder"/> which do already exist in <paramref name="targetFolder"/> will be deleted without copying them and without any backup. (Only filepath/-name will be compared. The content of the file does not matter for this comparison.)
            This function preserves the directory-structure of <paramref name="sourceFolder"/>.
            This function ignores empty directories in <paramref name="sourceFolder"/>.
            </remarks>
        </member>
        <member name="M:GRYLibrary.Utilities.RunAllConcurrentAndReturnAllResults``1(System.Collections.Generic.ISet{System.Func{``0}},System.Int32)">
            <summary>
            Starts all <see cref="T:System.Func`1"/>-objects in <paramref name="functions"/> concurrent and return all results which did not throw an exception.
            </summary>
            <returns>The results of all finished <paramref name="functions"/>-methods with their results.</returns>
        </member>
        <member name="M:GRYLibrary.Utilities.RunAllConcurrentAndReturnFirstResult``1(System.Collections.Generic.ISet{System.Func{``0}},System.Int32)">
            <summary>
            Starts all <see cref="T:System.Threading.ThreadStart"/>-objects in <paramref name="functions"/> concurrent and return the result of the first execution which does not throw an exception.
            Warning: This function is not implemented yet.
            </summary>
            <returns>The result of the first finished <paramref name="functions"/>-method.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="functions"/> is empty.</exception>
            <exception cref="T:System.Exception">If every <paramref name="functions"/>-method throws an exception.</exception>
        </member>
        <member name="M:GRYLibrary.Utilities.GetCommandLineArguments">
            <returns>Returns the command line arguments of the current executed program.</returns>
            <remarks>It is guaranteed that the result does not have leading or trailing whitespaces.</remarks>
        </member>
        <member name="M:GRYLibrary.Utilities.IsAuthenticated(System.String,System.String,System.String,System.String)">
            <summary>
            Authenticates a user against an active directory.
            </summary>
            <param name="username">Represents the name of the desired user. It can be "MyUsername" or optionally "Domain\MyUsername."</param>
            <param name="password">Represents the password to authenticate <paramref name="username"/>.</param>
            <param name="authenticationProtocol"></param>
            <param name="authentificationServerName">Represents the (LDAP-)server. The format must be with leading slashs, e. g. "//MyServer.com".</param>
            <returns>Returns true if and only if <paramref name="password"/> is the correct password for the user with the name <paramref name="username"/></returns>
        </member>
        <member name="T:GRYLibrary.SimpleGenericXMLSerializer`1">
            <summary>
            Represents a very easy usable XML-Serializer.
            </summary>
            <typeparam name="T">The type of the object which should be serialized.</typeparam>
        </member>
    </members>
</doc>
